// Copyright 2015 Kerbas_ad_astra
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


// **** MASTER CONTROLS ****
SMURFFCONFIG
{
	// 1 = real-ish performance ("classic" SMURFF), 0 = stock, and anything in between is in between.  Probably shouldn't go beyond 1, since strange things might happen if too much mass gets subtracted.
	
	tanklever = 1
	enginelever = 1
	podlever = 0
}

// Nasty number crunching ensues -- please don't tinker below this line.

@SMURFFCONFIG:BEFORE[SMURFF]
{	
	// *** TANKS ***
	
	// ** LFO **
	
	lfofracstd = 0.125 //tank mass is 1/8th fuel mass
	
	lfofactor = 4  // we want to divide that by four to get from 89% to 97%, so this is a complicated way to turn 4 into 3/4.
	@lfofactor != #$tanklever$
	
	lfominusfactor = 1
	@lfominusfactor /= #$lfofactor$
	@lfominusfactor -= 1
	@lfominusfactor *= -1
	
	lfomassfactor = 1
	@lfomassfactor = #$lfominusfactor$
	@lfomassfactor *= #$lfofracstd$
	
	// ** MONOPROP **
	
	monofracstd = 0.133333 // tanks mass is 2/15 fuel mass
	
	monofactor = 4
	@monofactor != #$tanklever$
	
	monominusfactor = 1
	@monominusfactor /= #$monofactor$
	@monominusfactor -= 1
	@monominusfactor *= -1
	
	monomassfactor = 1
	@monomassfactor = #$monominusfactor$
	@monomassfactor *= #$monofracstd$
	
	// ** XENON **
	
	xenonfracstd = 0.78
	
	xenonfactor = 7 // stockalike tank mass is 78% fuel mass, we want to divide that by seven (to get to tank mass = 11% of fuel mass -> 90% fuel mass fraction), so subtract 6/7ths of that.
	@xenonfactor != #$tanklever$
	
	xenonminusfactor = 1
	@xenonminusfactor /= #$xenonfactor$
	@xenonminusfactor -= 1
	@xenonminusfactor *= -1
	
	xenonmassfactor = 1
	@xenonmassfactor = #$xenonminusfactor$
	@xenonmassfactor *= #$xenonfracstd$
	
	// ** ARGON **
	
	argonfracstd = 0.78
	
	argonfactor = 1.26 // NFP argon tank mass is 78% fuel mass, we want to divide that by 1.26 to get to tank mass = 62% of fuel mass (per erps.spacegrant.org/uploads/images/images/iepc_articledownload_1988-2007/1991index/IEPC1991-107.pdf).
	@argonfactor != #$tanklever$
	
	argonminusfactor = 1
	@argonminusfactor /= #$argonfactor$
	@argonminusfactor -= 1
	@argonminusfactor *= -1
	
	argonmassfactor = 1
	@argonmassfactor = #$argonminusfactor$
	@argonmassfactor *= #$argonfracstd$
	
	// ** SWITCHABLE **
	
	switchablefactor = 2
	@switchablefactor != #$tanklever$
	
	// *** ENGINES ***
	
	// For TWR, we want 1 to correspond to a 4x multiplication of TWR, and 0 to a "1x" multiplication.  It's exponential, so 0.5 will correspond to a 2x factor.
	
	enginemassfactor = 0.375
	@enginemassfactor != #$enginelever$
	
	enginethrustfactor = 1.5
	@enginethrustfactor != #$enginelever$
	
	// ** SOLIDS **
	
	solidfracstd = 0.23 // kickback structure mass is is 23% of fuel mass
	
	solidfactor = 1.66667 //we want to correct that to 13% to match SSSRBs, so divide by 5/3 = mult by 60%
	@solidfactor != #$enginelever$
	
	solidminusfactor = 1
	@solidminusfactor /= #$solidfactor$
	@solidminusfactor -= 1
	@solidminusfactor *= -1
	
	solidmassfactor = 1
	@solidmassfactor = #$solidminusfactor$
	@solidmassfactor *= #$solidfracstd$
	
	//Isp is already outside the log in the rocket equation, so it's just a linear relationship.
	
	srbispfactor = 40 // by default, add 40 seconds to bring Kickback close to Space Shuttle SRBs.
	@srbispfactor *= #$enginelever$
	
	// *** PODS ***
	
	podfactor = 1
	temp = #$podlever$
	@temp /= 2
	@podfactor -= #$temp$
}


// **** FUEL TANKS ****

@PART[*]:HAS[@RESOURCE[LiquidFuel]]:FOR[SMURFF] 
{
	%resourcemass = #$RESOURCE[LiquidFuel]/maxAmount$
	@resourcemass *= #$@RESOURCE_DEFINITION[LiquidFuel]/density$ //In case the density changes -- it shouldn't, but why tempt fate?
	@resourcemass *= #$@SMURFFCONFIG/lfomassfactor$
	@mass -= #$resourcemass$
	-resourcemass = delete
	
	%MODULE[ModuleSMURFF]{ }
}

@PART[*]:HAS[@RESOURCE[Oxidizer]]:FOR[SMURFF]
{
	%resourcemass = #$RESOURCE[Oxidizer]/maxAmount$
	@resourcemass *= #$@RESOURCE_DEFINITION[Oxidizer]/density$ //In case the density changes -- it shouldn't, but why tempt fate?
	@resourcemass *= #$@SMURFFCONFIG/lfomassfactor$
	@mass -= #$resourcemass$
	-resourcemass = delete
	
	%MODULE[ModuleSMURFF]{ }
}

@PART[*]:HAS[@RESOURCE[MonoPropellant]]:FOR[SMURFF]
{
	%resourcemass = #$RESOURCE[MonoPropellant]/maxAmount$
	@resourcemass *= #$@RESOURCE_DEFINITION[MonoPropellant]/density$ //In case the density changes -- it shouldn't, but why tempt fate?
	@resourcemass *= #$@SMURFFCONFIG/monomassfactor$
	@mass -= #$resourcemass$
	-resourcemass = delete
	
	%MODULE[ModuleSMURFF]{ }
}

@PART[*]:HAS[@RESOURCE[XenonGas]]:FOR[SMURFF]
{
	%resourcemass = #$RESOURCE[XenonGas]/maxAmount$
	@resourcemass *= #$@RESOURCE_DEFINITION[XenonGas]/density$ //In case the density changes -- it shouldn't, but why tempt fate?
	@resourcemass *= #$@SMURFFCONFIG/xenonmassfactor$
	@mass -= #$resourcemass$
	-resourcemass = delete
	
	%MODULE[ModuleSMURFF]{ }
}

@PART[*]:HAS[@RESOURCE[ArgonGas]]:FOR[SMURFF] //for Nertea's Near Future Propulsion
{
	%resourcemass = #$RESOURCE[ArgonGas]/maxAmount$
	@resourcemass *= #$@RESOURCE_DEFINITION[ArgonGas]/density$ //In case the density changes -- it shouldn't, but why tempt fate?
	@resourcemass *= #$@SMURFFCONFIG/argonmassfactor$
	@mass -= #$resourcemass$
	-resourcemass = delete
	
	%MODULE[ModuleSMURFF]{ }
}

@PART[*]:HAS[@RESOURCE[SolidFuel]]:FOR[SMURFF]
{
	%resourcemass = #$RESOURCE[SolidFuel]/maxAmount$
	@resourcemass *= #$@RESOURCE_DEFINITION[SolidFuel]/density$ //In case the density changes -- it shouldn't, but why tempt fate?
	@resourcemass *= #$@SMURFFCONFIG/solidmassfactor$ // 40% of 23% of the SolidFuel mass -- Kickback tank mass is 23% fuel mass, we want to correct that to 13%, so subtract 40% of that.
	@mass -= #$resourcemass$
	-resourcemass = delete
	
	@MODULE[ModuleEngines*]:HAS[@PROPELLANT[SolidFuel]],*
	{
		key0 = #$atmosphereCurve/key,0[1, ]$ //get the keys -- the second element of the first space-separated list called "key".
		key1 = #$atmosphereCurve/key,1[1, ]$
		@key0 += #$@SMURFFCONFIG/srbispfactor$ //modify values
		@key1 += #$@SMURFFCONFIG/srbispfactor$
		@atmosphereCurve
		{
			@key,0 = #$key,0[0, ]$ $../key0$ $key,0[2, ]$ $key,0[3, ]$
			@key,0 ^= : +$::
			@key,1 = #$key,1[0, ]$ $../key1$ $key,1[2, ]$ $key,1[3, ]$
			@key,1 ^= : +$::
		}
	}
	
	MODULE
	{
		name = ModuleSMURFF
	}
}

@PART[*]:HAS[@MODULE[TankContentSwitcher]]:FOR[SMURFF]
{
	@MODULE[TankContentSwitcher]
	{
		@TANK_TYPE_OPTION[Mixed,LiquidFuel,Oxidizer,RCS]
		{
			@dryDensity /= #$@SMURFFCONFIG/lfofactor$
			@RESOURCE[LiquidFuel]
			{
				@unitsPerT *= #$@SMURFFCONFIG/lfofactor$
			}
			@RESOURCE[Oxidizer]
			{
				@unitsPerT *= #$@SMURFFCONFIG/lfofactor$
			}
			@RESOURCE[MonoPropellant]
			{
				@unitsPerT *= #$@SMURFFCONFIG/lfofactor$
			}
		}
		@TANK_TYPE_OPTION[XenonGas]
		{
			@dryDensity /= #$@SMURFFCONFIG/xenonfactor$
			@RESOURCE[XenonGas]
			{
				@unitsPerT *= #$@SMURFFCONFIG/xenonfactor$
			}
		}
		@TANK_TYPE_OPTION[SolidFuel]
		{
			@dryDensity /= #$@SMURFFCONFIG/solidfactor$
			@RESOURCE[SolidFuel]
			{
				@unitsPerT *= #$@SMURFFCONFIG/solidfactor$
			}
		}
	}
	
	%MODULE[ModuleSMURFF]{ }
}

@PART[*]:HAS[@MODULE[FSfuelSwitch],#totalCap[*]]:FOR[SMURFF] //Stock Fuel Switch
{
	%massBuff = #$totalCap$
	@massBuff *= 0.005
	@massBuff *= #$@SMURFFCONFIG/lfomassfactor$
	@mass -= #$massBuff$
	
	@MODULE[FSfuelSwitch]
	{
		@basePartMass = #$../mass$
	}
	
	%MODULE[ModuleSMURFF]{ }
}

@PART[*]:HAS[@MODULE[InterstellarFuelSwitch],#totalCap[*]]:FOR[SMURFF] //Cryogenic Engines, LFO tanks
{
	tankMass0 = #$MODULE[InterstellarFuelSwitch]/tankMass[0,;]$ //LFO
	tankMass1 = #$MODULE[InterstellarFuelSwitch]/tankMass[1,;]$ //Hydrolox
	tankMass2 = #$MODULE[InterstellarFuelSwitch]/tankMass[2,;]$ //LF
	tankMass3 = #$MODULE[InterstellarFuelSwitch]/tankMass[3,;]$ //O
	tankMass4 = #$MODULE[InterstellarFuelSwitch]/tankMass[4,;]$ //LH2
	
	%massBuff = #$tankMass0$
	
	@massBuff -= #$mass$ //Capture the reduction in dry mass from any other buffs (e.g. integrated monoprop or xenon tanks)
	
	@tankMass0 -= #$massBuff$
	@tankMass1 -= #$massBuff$
	@tankMass2 -= #$massBuff$
	@tankMass3 -= #$massBuff$
	@tankMass4 -= #$massBuff$
	
	@massBuff = #$totalCap$ //Reduction in dry mass for LFO (and pure LF or O) tanks
	@massBuff *= 0.005
	@massBuff *= #$@SMURFFCONFIG/lfomassfactor$
	@mass -= #$massBuff$
	
	@tankMass0 -= #$massBuff$
	@tankMass2 -= #$massBuff$
	@tankMass3 -= #$massBuff$
	
	@massBuff = #$mixOX$ //Reduction in dry mass for Ox in Hydrolox tanks
	@massBuff *= 0.005
	@massBuff *= #$@SMURFFCONFIG/lfomassfactor$
	
	@tankMass1 -= #$massBuff$
	
	//The pure LH2 (and LH2 component of hydrolox) are left untouched, to compensate for the lack of boiloff.
	
	@MODULE[InterstellarFuelSwitch]
	{
		@tankMass = #$../tankMass0$;$../tankMass1$;$../tankMass2$;$../tankMass3$;$../tankMass4$
	}
	
	%MODULE[ModuleSMURFF]{ }
}

@PART[*]:HAS[@MODULE[InterstellarFuelSwitch],#massPerUnitOX[*]]:FOR[SMURFF] //Cryogenic Engines, LH2 tanks
{
	tankMass0 = #$MODULE[InterstellarFuelSwitch]/tankMass[0,;]$ //LH2
	tankMass1 = #$MODULE[InterstellarFuelSwitch]/tankMass[1,;]$ //Hydrolox
	tankMass2 = #$MODULE[InterstellarFuelSwitch]/tankMass[2,;]$ //Ox
	
	%massBuff = #$tankMass0$
	
	@massBuff -= #$mass$ //Capture the reduction in dry mass from any other buffs (e.g. integrated monoprop or xenon tanks)
	
	@tankMass0 -= #$massBuff$
	@tankMass1 -= #$massBuff$
	@tankMass2 -= #$massBuff$
	
	@massBuff = #$mixOX$
	@massBuff *= #$massPerUnitOX$
	@massBuff *= #$@SMURFFCONFIG/lfominusfactor$
	
	@tankMass1 -= #$massBuff$
	
	@massBuff = #$OX$
	@massBuff *= #$massPerUnitOX$
	@massBuff *= #$@SMURFFCONFIG/lfominusfactor$
	
	@tankMass2 -= #$massBuff$
	
	@MODULE[InterstellarFuelSwitch]
	{
		@tankMass = #$../tankMass0$;$../tankMass1$;$../tankMass2$
	}
	
	%MODULE[ModuleSMURFF]{ }
}

// **** PODS AND HEAT SHIELDS ****

@PART[*]:HAS[#CrewCapacity[>0]]:FOR[SMURFF]
{
	@mass *= #$@SMURFFCONFIG/podfactor$
	
	%MODULE[ModuleSMURFF]{ }
}

@PART[*]:HAS[@MODULE[Ablator],@MODULE[ModuleSMURFF]]:FOR[SMURFF] // For pods with built-in ablators.
{
	@RESOURCE[Ablator]
	{
		@amount *= #$@SMURFFCONFIG/podfactor$
		@maxAmount *= #$@SMURFFCONFIG/podfactor$
	}
}

@PART[*]:HAS[@RESOURCE[Ablator],!MODULE[ModuleSMURFF]]:FOR[SMURFF] // Some pods have ablator built-in, let's not slash their mass by a factor of 4...
{
	@mass *= #$@SMURFFCONFIG/podfactor$
	
	@RESOURCE[Ablator]
	{
		@amount *= #$@SMURFFCONFIG/podfactor$
		@maxAmount *= #$@SMURFFCONFIG/podfactor$
	}
	
	%MODULE[ModuleSMURFF]{ }
}

// **** ENGINES ****

@PART[*]:HAS[@MODULE[ModuleEngines*],@MODULE[ModuleSMURFF]]:FOR[SMURFF] // Engines that already have ModuleSMURFF -- i.e. which have already been buffed, because they're liquid-fuel boosters -- just get their thrust increased.
{
	@MODULE[ModuleEngines*]:HAS[@PROPELLANT[Oxidizer]],*
	{
		@maxThrust *= #$@SMURFFCONFIG/enginethrustfactor$
	}
}

@PART[*]:HAS[@MODULE[ModuleEngines*],!MODULE[ModuleEngines*]:HAS[!PROPELLANT[Oxidizer]],!RESOURCE[SolidFuel],!MODULE[ModuleCommand],!MODULE[ModuleCargoBay],!MODULE[ModuleSMURFF]]:FOR[SMURFF] //Mass buff now limited to engines which only have oxidizer-burning modes.  (Multimode engines like SpaceY are OK.)
{
	@mass *= #$@SMURFFCONFIG/enginemassfactor$
	
	@MODULE[ModuleEngines*]:HAS[@PROPELLANT[Oxidizer]],*
	{
		@maxThrust *= #$@SMURFFCONFIG/enginethrustfactor$
	}
	
	MODULE
	{
		name = ModuleSMURFF
	}
}

@PART[*]:HAS[@MODULE[ModuleEngines*],!MODULE[ModuleSMURFF]]:FOR[SMURFF] // And now the engines that weren't buffed because they aren't LFBs, but are command pods, cargo bays, or multimode engines with non-Oxidizer-burning modes.
{
	@MODULE[ModuleEngines*]:HAS[@PROPELLANT[Oxidizer]],*
	{
		@maxThrust *= #$@SMURFFCONFIG/enginethrustfactor$
	}
	
	MODULE
	{
		name = ModuleSMURFF
	}
}

// **** SWITCHABLE TANKS ****

//I put these at the end because they give such a great mass reduction that I don't want it to apply it to any parts that have been buffed for any other reason -- they should apply to switchable tanks only.

@PART[*]:HAS[@MODULE[FStextureSwitch2]:HAS[#useFuelSwitchModule[true],#repaintableEVA[true]],@MODULE[FSfuelSwitch],!MODULE[ModuleEngines*],!MODULE[ModuleCommand],!MODULE[ModuleCargoBay],!MODULE[ModuleSMURFF]]:FOR[SMURFF]
{
	@mass /= #$@SMURFFCONFIG/switchablefactor$
	
	@MODULE[FSfuelSwitch]
	{
		@basePartMass /= #$@SMURFFCONFIG/switchablefactor$
		// @tankMass /= #$@SMURFFCONFIG/switchablefactor$ //It's not that simple.
	}
	
	MODULE
	{
		name = ModuleSMURFF
	}
}

@PART[*]:HAS[@MODULE[FSfuelSwitch]:HAS[#availableInFlight[true]],!MODULE[ModuleEngines*],!MODULE[ModuleCommand],!MODULE[ModuleCargoBay],!MODULE[ModuleSMURFF]]:FOR[SMURFF]
{
	@mass /= #$@SMURFFCONFIG/switchablefactor$
	
	@MODULE[FSfuelSwitch]
	{
		@basePartMass /= #$@SMURFFCONFIG/switchablefactor$
		// @tankMass /= #$@SMURFFCONFIG/switchablefactor$ //It's not that simple.
	}
	
	MODULE
	{
		name = ModuleSMURFF
	}
}

@PART[*]:HAS[@MODULE[FSfuelSwitch]:HAS[~availableInFlight[true]],!MODULE[ModuleEngines*],!MODULE[ModuleCommand],!MODULE[ModuleCargoBay],!MODULE[ModuleSMURFF]]:FOR[SMURFF]
{
	@mass /= #$@SMURFFCONFIG/lfofactor$
	
	@MODULE[FSfuelSwitch]
	{
		@basePartMass /= #$@SMURFFCONFIG/lfofactor$
		// @tankMass /= #$@SMURFFCONFIG/lfofactor$ //It's not that simple.
	}
	
	MODULE
	{
		name = ModuleSMURFF
	}
}

@PART[*]:HAS[@MODULE[InterstellarTextureSwitch2]:HAS[#useFuelSwitchModule[true],#repaintableEVA[true]],@MODULE[InterstellarFuelSwitch],!MODULE[ModuleEngines*],!MODULE[ModuleCommand],!MODULE[ModuleCargoBay],!MODULE[ModuleSMURFF]]:FOR[SMURFF]
{
	@mass /= #$@SMURFFCONFIG/switchablefactor$
	
	@MODULE[InterstellarFuelSwitch]
	{
		@basePartMass /= #$@SMURFFCONFIG/switchablefactor$
		// @tankMass /= #$@SMURFFCONFIG/switchablefactor$ //It's not that simple.
	}
	
	MODULE
	{
		name = ModuleSMURFF
	}
}

@PART[*]:HAS[@MODULE[InterstellarFuelSwitch]:HAS[#availableInFlight[true]],!MODULE[ModuleEngines*],!MODULE[ModuleCommand],!MODULE[ModuleCargoBay],!MODULE[ModuleSMURFF]]:FOR[SMURFF]
{
	@mass /= #$@SMURFFCONFIG/switchablefactor$
	
	@MODULE[InterstellarFuelSwitch]
	{
		@basePartMass /= #$@SMURFFCONFIG/switchablefactor$
		// @tankMass /= #$@SMURFFCONFIG/switchablefactor$ //It's not that simple.
	}
	
	MODULE
	{
		name = ModuleSMURFF
	}
}

@PART[*]:HAS[@MODULE[InterstellarFuelSwitch]:HAS[~availableInFlight[true]],!MODULE[ModuleEngines*],!MODULE[ModuleCommand],!MODULE[ModuleCargoBay],!MODULE[ModuleSMURFF]]:FOR[SMURFF]
{
	@mass /= #$@SMURFFCONFIG/lfofactor$
	
	@MODULE[InterstellarFuelSwitch]
	{
		@basePartMass /= #$@SMURFFCONFIG/lfofactor$
		// @tankMass /= #$@SMURFFCONFIG/lfofactor$ //It's not that simple.
	}
	
	MODULE
	{
		name = ModuleSMURFF
	}
}

// **** CLEANUP ****

@PART[*]:HAS[@MODULE[ModuleSMURFF]]:FINAL // Clean up our tracks.
{
	@MODULE[ModuleEngines*]:HAS[@PROPELLANT[SolidFuel]]
	{
		-key0 = delete
		-key1 = delete
	}
	
	-massBuff = delete
	-tankMass0 = delete
	-tankMass1 = delete
	-tankMass2 = delete
	-tankMass3 = delete
	-tankMass4 = delete
	
	-MODULE[ModuleSMURFF]{ }
}
