// Copyright 2015 Kerbas_ad_astra
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


// **** MASTER CONTROLS ****
SMURFFCONFIG
{
	// 1 = real-ish performance ("classic" SMURFF), 0 = stock, and anything in between is in between.  Probably shouldn't go beyond 1, since strange things might happen if too much mass gets subtracted.
	
	tanklever = 1
	enginelever = 1
	podlever = 1
}

// Nasty number crunching ensues -- please don't tinker below this line.

@SMURFFCONFIG:FIRST
{	
	// *** TANKS ***
	
	// ** LFO **
	
	lfofracstd = 0.125 //tank mass is 1/8th fuel mass
	
	lfofactor = 4  // we want to divide that by four to get from 89% to 97%, so this is a complicated way to turn 4 into 3/4.
	@lfofactor != #$tanklever$
	
	lfominusfactor = 1
	@lfominusfactor /= #$lfofactor$
	@lfominusfactor -= 1
	@lfominusfactor *= -1
	
	lfomassfactor = 1
	@lfomassfactor = #$lfominusfactor$
	@lfomassfactor *= #$lfofracstd$
	
	lforeservefactor = 1
	@lforeservefactor /= #$lfofactor$
	@lforeservefactor *= #$lfofracstd$
	
	// ** MONOPROP **
	
	monofracstd = 0.133333 // tanks mass is 2/15 fuel mass
	
	monofactor = 4
	@monofactor != #$tanklever$
	
	monominusfactor = 1
	@monominusfactor /= #$monofactor$
	@monominusfactor -= 1
	@monominusfactor *= -1
	
	monomassfactor = 1
	@monomassfactor = #$monominusfactor$
	@monomassfactor *= #$monofracstd$
	
	monoreservefactor = 1
	@monoreservefactor /= #$monofactor$
	@monoreservefactor *= #$monofracstd$
	
	// ** XENON **
	
	xenonfracstd = 0.78
	
	xenonfactor = 7 // stockalike tank mass is 78% fuel mass, we want to divide that by seven (to get to tank mass = 11% of fuel mass -> 90% fuel mass fraction), so subtract 6/7ths of that.
	@xenonfactor != #$tanklever$
	
	xenonminusfactor = 1
	@xenonminusfactor /= #$xenonfactor$
	@xenonminusfactor -= 1
	@xenonminusfactor *= -1
	
	xenonmassfactor = 1
	@xenonmassfactor = #$xenonminusfactor$
	@xenonmassfactor *= #$xenonfracstd$
	
	xenonreservefactor = 1
	@xenonreservefactor /= #$xenonfactor$
	@xenonreservefactor *= #$xenonfracstd$
	
	// ** ORE **
	
	orefracstd = 0.166667 //stockalike tank mass is 1/6th ore mass
	
	orefactor = 3.33333 // we want to divide that by 10/3 to get to tank mass = 5% of ore mass (baseline: a 55 gal/200 L drum can hold ~400 kg of Ore, and weighs about 40 lbs ~ 20 kg.
	@orefactor != #$tanklever$
	
	oreminusfactor = 1
	@oreminusfactor /= #$orefactor$
	@oreminusfactor -= 1
	@oreminusfactor *= -1
	
	oremassfactor = 1
	@oremassfactor = #$oreminusfactor$
	@oremassfactor *= #$orefracstd$
	
	orereservefactor = 1
	@orereservefactor /= #$orefactor$
	@orereservefactor *= #$orefracstd$
	
	// ** ARGON **
	
	argonfracstd = 0.78
	
	argonfactor = 1.26 // NFP argon tank mass is 78% fuel mass, we want to divide that by 1.26 to get to tank mass = 62% of fuel mass (per http://erps.spacegrant.org/uploads/images/images/iepc_articledownload_1988-2007/1991index/IEPC1991-107.pdf).
	@argonfactor != #$tanklever$
	
	argonminusfactor = 1
	@argonminusfactor /= #$argonfactor$
	@argonminusfactor -= 1
	@argonminusfactor *= -1
	
	argonmassfactor = 1
	@argonmassfactor = #$argonminusfactor$
	@argonmassfactor *= #$argonfracstd$
	
	argonreservefactor = 1
	@argonreservefactor /= #$argonfactor$
	@argonreservefactor *= #$argonfracstd$
	
	// ** LITHIUM **
	
	lithfracstd = 0.78 //Per NFP lithium tanks
	
	lithfactor = 4 // I have no sources on the storage capacity of lithium tanks, so we're going for 84% -- the tank-mass-per-volume is somewhere between ZBO and argon, which feels appropriate.
	@lithfactor != #$tanklever$
	
	lithminusfactor = 1
	@lithminusfactor /= #$lithfactor$
	@lithminusfactor -= 1
	@lithminusfactor *= -1
	
	lithmassfactor = 1
	@lithmassfactor = #$lithminusfactor$
	@lithmassfactor *= #$lithfracstd$
	
	lithreservefactor = 1
	@lithreservefactor /= #$lithfactor$
	@lithreservefactor *= #$lithfracstd$
	
	// ** LH2-LIFTER TANKS ** //From CryoTanks, the ones with boiloff
	
	lh2liftfracstd = 0.35286 // 25/70.85
	
	lh2liftfactor = 0.6049 // Goal: get to LH2 tank mass = 58.333% fuel mass (making them *heavier*!  LH2 is super fluffy...)
	@lh2liftfactor != #$tanklever$
	
	lh2liftminusfactor = 1
	@lh2liftminusfactor /= #$lh2liftfactor$
	@lh2liftminusfactor -= 1
	@lh2liftminusfactor *= -1
	
	lh2liftmassfactor = 1
	@lh2liftmassfactor = #$lh2liftminusfactor$
	@lh2liftmassfactor *= #$lh2liftfracstd$
	
	lh2liftreservefactor = 1
	@lh2liftreservefactor /= #$lh2liftfactor$
	@lh2liftreservefactor *= #$lh2liftfracstd$
	
	// ** LH2-ZBO TANKS ** //From CryoTanks, the ones with boiloff control available (provided power is present)
	
	lh2zbofracstd = 0.44107 // 31.25/70.85
	
	lh2zbofactor = 0.37634 // Goal: get to LH2 tank mass = 1.172x fuel mass (making them *heavier*!  LH2 is super fluffy...), ref: http://ntrs.nasa.gov/archive/nasa/casi.ntrs.nasa.gov/20030067928.pdf -- mass of the power hardware is not included, so there's a bit of a win there.
	@lh2zbofactor != #$tanklever$
	
	lh2zbominusfactor = 1
	@lh2zbominusfactor /= #$lh2zbofactor$
	@lh2zbominusfactor -= 1
	@lh2zbominusfactor *= -1
	
	lh2zbomassfactor = 1
	@lh2zbomassfactor = #$lh2zbominusfactor$
	@lh2zbomassfactor *= #$lh2zbofracstd$
	
	lh2zboreservefactor = 1
	@lh2zboreservefactor /= #$lh2zbofactor$
	@lh2zboreservefactor *= #$lh2zbofracstd$
	
	// ** SWITCHABLE
	
	switchablefactor = 2
	@switchablefactor != #$tanklever$
	
	// *** ENGINES ***
	
	// For TWR, we want 1 to correspond to a 4x multiplication of TWR, and 0 to a "1x" multiplication.  It's exponential, so 0.5 will correspond to a 2x factor.
	
	enginemassfactor = 0.375
	@enginemassfactor != #$enginelever$
	
	enginethrustfactor = 1.5
	@enginethrustfactor != #$enginelever$
	
	// ** SOLIDS **
	
	solidfracstd = 0.23 // kickback structure mass is is 23% of fuel mass
	
	solidfactor = 1.66667 //we want to correct that to 13% to match SSSRBs, so divide by 5/3 = mult by 60%
	@solidfactor != #$enginelever$
	
	solidminusfactor = 1
	@solidminusfactor /= #$solidfactor$
	@solidminusfactor -= 1
	@solidminusfactor *= -1
	
	solidmassfactor = 1
	@solidmassfactor = #$solidminusfactor$
	@solidmassfactor *= #$solidfracstd$
	
	solidreservefactor = 1
	@solidreservefactor /= #$solidfactor$
	@solidreservefactor *= #$solidfracstd$
	
	//Isp is already outside the log in the rocket equation, so it's just a linear relationship.
	
	srbispfactor = 40 // by default, add 40 seconds to bring Kickback close to Space Shuttle SRBs.
	@srbispfactor *= #$enginelever$
	
	// *** PODS ***
	
	podfactor = 1
	temp = #$podlever$
	@temp /= 2
	@podfactor -= #$temp$
}


// **** FUEL TANKS ****'

//First, mark the tanks for reserve masses

@PART[*]:HAS[@RESOURCE[LiquidFuel],~SMURFFExclude[*rue]]:FOR[zzz_SMURFF] 
{
	%reservedmass = 0
	%initialmass = #$mass$
}

@PART[*]:HAS[@RESOURCE[Oxidizer],~SMURFFExclude[*rue]]:FOR[zzz_SMURFF] 
{
	%reservedmass = 0
	%initialmass = #$mass$
}

@PART[*]:HAS[@RESOURCE[MonoPropellant],~SMURFFExclude[*rue]]:FOR[zzz_SMURFF] 
{
	%reservedmass = 0
	%initialmass = #$mass$
}

@PART[*]:HAS[@RESOURCE[XenonGas],~SMURFFExclude[*rue]]:FOR[zzz_SMURFF] 
{
	%reservedmass = 0
	%initialmass = #$mass$
}

@PART[*]:HAS[@RESOURCE[Ore],~SMURFFExclude[*rue]]:FOR[zzz_SMURFF] 
{
	%reservedmass = 0
	%initialmass = #$mass$
}

@PART[*]:HAS[@RESOURCE[Ablator],~SMURFFExclude[*rue]]:FOR[zzz_SMURFF] 
{
	%reservedmass = 0
	%initialmass = #$mass$
}

@PART[*]:HAS[@RESOURCE[ArgonGas],~SMURFFExclude[*rue]]:FOR[zzz_SMURFF] 
{
	%reservedmass = 0
	%initialmass = #$mass$
}

@PART[*]:HAS[@RESOURCE[Lithium],~SMURFFExclude[*rue]]:FOR[zzz_SMURFF] 
{
	%reservedmass = 0
	%initialmass = #$mass$
}

@PART[*]:HAS[@RESOURCE[LqdHydrogen],~SMURFFExclude[*rue]]:FOR[zzz_SMURFF] 
{
	%reservedmass = 0
	%initialmass = #$mass$
}

@PART[*]:HAS[@RESOURCE[SolidFuel],~SMURFFExclude[*rue]]:FOR[zzz_SMURFF] 
{
	%reservedmass = 0
	%initialmass = #$mass$
}

@PART[*]:HAS[@MODULE[FSfuelSwitch],#totalCap[*],~SMURFFExclude[*rue]]:FOR[zzz_SMURFF] //Stock Fuel Switch
{
	%reservedmass = 0
	%initialmass = #$mass$
}

@PART[*]:HAS[@RESOURCE[ElectricCharge],~SMURFFExclude[*rue]]:FOR[zzz_SMURFF] //We're not changing the masses of batteries -- just adding them to the "reserved mass" for command pods and service modules.
{
	%reservedmass = 0
	%initialmass = #$mass$
	
	%resourcemass = #$RESOURCE[ElectricCharge]/maxAmount$
	@resourcemass *= 0.00005
	@reservedmass += #$resourcemass$
	-resourcemass = delete
	
	%MODULE[ModuleSMURFF]{ }
}

@PART[*]:HAS[@RESOURCE[LiquidFuel],~SMURFFExclude[*rue]]:FOR[zzz_SMURFF] 
{
	%resourcemass = #$RESOURCE[LiquidFuel]/maxAmount$
	@resourcemass *= #$@RESOURCE_DEFINITION[LiquidFuel]/density$ //In case the density changes -- it shouldn't, but why tempt fate?
	@resourcemass *= #$@SMURFFCONFIG/lfomassfactor$
	@mass -= #$resourcemass$
	@resourcemass /= #$@SMURFFCONFIG/lfomassfactor$
	@resourcemass *= #$@SMURFFCONFIG/lforeservefactor$
	@reservedmass += #$resourcemass$
	-resourcemass = delete
	
	%MODULE[ModuleSMURFF]{ }
}

@PART[*]:HAS[@RESOURCE[Oxidizer],~SMURFFExclude[*rue]]:FOR[zzz_SMURFF]
{
	%resourcemass = #$RESOURCE[Oxidizer]/maxAmount$
	@resourcemass *= #$@RESOURCE_DEFINITION[Oxidizer]/density$ //In case the density changes -- it shouldn't, but why tempt fate?
	@resourcemass *= #$@SMURFFCONFIG/lfomassfactor$
	@mass -= #$resourcemass$
	@resourcemass /= #$@SMURFFCONFIG/lfomassfactor$
	@resourcemass *= #$@SMURFFCONFIG/lforeservefactor$
	@reservedmass += #$resourcemass$
	-resourcemass = delete
	
	%MODULE[ModuleSMURFF]{ }
}

@PART[*]:HAS[@RESOURCE[MonoPropellant],~SMURFFExclude[*rue]]:FOR[zzz_SMURFF]
{
	%resourcemass = #$RESOURCE[MonoPropellant]/maxAmount$
	@resourcemass *= #$@RESOURCE_DEFINITION[MonoPropellant]/density$ //In case the density changes -- it shouldn't, but why tempt fate?
	@resourcemass *= #$@SMURFFCONFIG/monomassfactor$
	@mass -= #$resourcemass$
	@resourcemass /= #$@SMURFFCONFIG/monomassfactor$
	@resourcemass *= #$@SMURFFCONFIG/monoreservefactor$
	@reservedmass += #$resourcemass$
	-resourcemass = delete
	
	%MODULE[ModuleSMURFF]{ }
}

@PART[*]:HAS[@RESOURCE[XenonGas],~SMURFFExclude[*rue]]:FOR[zzz_SMURFF]
{
	%resourcemass = #$RESOURCE[XenonGas]/maxAmount$
	@resourcemass *= #$@RESOURCE_DEFINITION[XenonGas]/density$ //In case the density changes -- it shouldn't, but why tempt fate?
	@resourcemass *= #$@SMURFFCONFIG/xenonmassfactor$
	@mass -= #$resourcemass$
	@resourcemass /= #$@SMURFFCONFIG/xenonmassfactor$
	@resourcemass *= #$@SMURFFCONFIG/xenonreservefactor$
	@reservedmass += #$resourcemass$
	-resourcemass = delete
	
	%MODULE[ModuleSMURFF]{ }
}

@PART[*]:HAS[@RESOURCE[Ore],~SMURFFExclude[*rue]]:FOR[zzz_SMURFF]
{
	%resourcemass = #$RESOURCE[Ore]/maxAmount$
	@resourcemass *= #$@RESOURCE_DEFINITION[Ore]/density$ //In case the density changes -- it shouldn't, but why tempt fate?
	@resourcemass *= #$@SMURFFCONFIG/oremassfactor$
	@mass -= #$resourcemass$
	@resourcemass /= #$@SMURFFCONFIG/oremassfactor$
	@resourcemass *= #$@SMURFFCONFIG/orereservefactor$
	@reservedmass += #$resourcemass$
	-resourcemass = delete
	
	%MODULE[ModuleSMURFF]{ }
}

@PART[*]:HAS[@RESOURCE[ArgonGas],~SMURFFExclude[*rue]]:FOR[zzz_SMURFF] //for Nertea's Near Future Propulsion
{
	%resourcemass = #$RESOURCE[ArgonGas]/maxAmount$
	@resourcemass *= #$@RESOURCE_DEFINITION[ArgonGas]/density$ //In case the density changes -- it shouldn't, but why tempt fate?
	@resourcemass *= #$@SMURFFCONFIG/argonmassfactor$
	@mass -= #$resourcemass$
	@resourcemass /= #$@SMURFFCONFIG/argonmassfactor$
	@resourcemass *= #$@SMURFFCONFIG/argonreservefactor$
	@reservedmass += #$resourcemass$
	-resourcemass = delete
	
	%MODULE[ModuleSMURFF]{ }
}

@PART[*]:HAS[@RESOURCE[Lithium],~SMURFFExclude[*rue]]:FOR[zzz_SMURFF]
{
	%resourcemass = #$RESOURCE[Lithium]/maxAmount$
	@resourcemass *= #$@RESOURCE_DEFINITION[Lithium]/density$ //In case the density changes -- it shouldn't, but why tempt fate?
	@resourcemass *= #$@SMURFFCONFIG/lithmassfactor$
	@mass -= #$resourcemass$
	@resourcemass /= #$@SMURFFCONFIG/lithmassfactor$
	@resourcemass *= #$@SMURFFCONFIG/lithreservefactor$
	@reservedmass += #$resourcemass$
	-resourcemass = delete
	
	%MODULE[ModuleSMURFF]{ }
}

@PART[*]:HAS[@RESOURCE[LqdHydrogen],~SMURFFExclude[*rue]]:FOR[zzz_SMURFF] //for RoverDude's Freight Transport Technologies (treated as ZBO, since they don't boil off, and if CryoTanks makes them "proper" ZBOs, they'll fall under a different patch.
{
	%resourcemass = #$RESOURCE[LqdHydrogen]/maxAmount$
	@resourcemass *= #$@RESOURCE_DEFINITION[LqdHydrogen]/density$ //In case the density changes -- it shouldn't, but why tempt fate?
	@resourcemass *= #$@SMURFFCONFIG/lh2zbomassfactor$
	@mass -= #$resourcemass$
	@resourcemass /= #$@SMURFFCONFIG/lh2zbomassfactor$
	@resourcemass *= #$@SMURFFCONFIG/lh2zboreservefactor$
	@reservedmass += #$resourcemass$
	-resourcemass = delete
	
	%MODULE[ModuleSMURFF]{ }
}

@PART[*]:HAS[@RESOURCE[SolidFuel],~SMURFFExclude[*rue]]:FOR[zzz_SMURFF]
{
	%resourcemass = #$RESOURCE[SolidFuel]/maxAmount$
	@resourcemass *= #$@RESOURCE_DEFINITION[SolidFuel]/density$ //In case the density changes -- it shouldn't, but why tempt fate?
	@resourcemass *= #$@SMURFFCONFIG/solidmassfactor$ // 40% of 23% of the SolidFuel mass -- Kickback tank mass is 23% fuel mass, we want to correct that to 13%, so subtract 40% of that.
	@mass -= #$resourcemass$
	@resourcemass /= #$@SMURFFCONFIG/solidmassfactor$
	@resourcemass *= #$@SMURFFCONFIG/solidreservefactor$
	@reservedmass += #$resourcemass$
	-resourcemass = delete
	
	@MODULE[ModuleEngines*]:HAS[@PROPELLANT[SolidFuel]],*
	{
		@atmosphereCurve
		{
			@key,0[1, ] += #$@SMURFFCONFIG/srbispfactor$
			@key,1[1, ] += #$@SMURFFCONFIG/srbispfactor$ //Only the first two, since the last is usually there to drag the Isp down to zero in super-thick atmospheres.
		}
	}
	
	%MODULE[ModuleSMURFF]{ }
}

@PART[*]:HAS[@MODULE[TankContentSwitcher],~SMURFFExclude[*rue]]:FOR[zzz_SMURFF]
{
	@MODULE[TankContentSwitcher]
	{
		@TANK_TYPE_OPTION[Mixed,LiquidFuel,Oxidizer,RCS]
		{
			@dryDensity /= #$@SMURFFCONFIG/lfofactor$
			@RESOURCE[LiquidFuel]
			{
				@unitsPerT *= #$@SMURFFCONFIG/lfofactor$
			}
			@RESOURCE[Oxidizer]
			{
				@unitsPerT *= #$@SMURFFCONFIG/lfofactor$
			}
			@RESOURCE[MonoPropellant]
			{
				@unitsPerT *= #$@SMURFFCONFIG/lfofactor$
			}
		}
		@TANK_TYPE_OPTION[XenonGas]
		{
			@dryDensity /= #$@SMURFFCONFIG/xenonfactor$
			@RESOURCE[XenonGas]
			{
				@unitsPerT *= #$@SMURFFCONFIG/xenonfactor$
			}
		}
		@TANK_TYPE_OPTION[SolidFuel]
		{
			@dryDensity /= #$@SMURFFCONFIG/solidfactor$
			@RESOURCE[SolidFuel]
			{
				@unitsPerT *= #$@SMURFFCONFIG/solidfactor$
			}
		}
		
		@TANK_TYPE_OPTION[Ore]
		{
			@dryDensity /= #$@SMURFFCONFIG/orefactor$
		}
	}
	
	%MODULE[ModuleSMURFF]{ }
}

// For Stock Fuel Switch, we need to set aside reserved mass first, so we can apply the built-in-engine mass buff for LFBs and integrated service modules, and then apply that to the fuel-switching module.

@PART[*]:HAS[@MODULE[FSfuelSwitch],#totalCap[*],~SMURFFExclude[*rue]]:FOR[zzz_SMURFF] //Stock Fuel Switch
{
	%massBuff = #$totalCap$
	@massBuff *= 0.005
	@massBuff *= #$@SMURFFCONFIG/lfofracstd$
	@reservedmass += #$massBuff$
	
	%MODULE[ModuleSMURFF]{ }
}

// **** PODS AND HEAT SHIELDS ****

@PART[*]:HAS[#CrewCapacity[>0],@MODULE[ModuleSMURFF],~SMURFFExclude[*rue]]:FOR[zzz_SMURFF] // Pods with integrated monoprop tanks and/or solid engines.
{
	@mass -= #$reservedmass$
	@mass *= #$@SMURFFCONFIG/podfactor$
	@mass += #$reservedmass$
}

@PART[*]:HAS[#CrewCapacity[>0],!MODULE[ModuleSMURFF],~SMURFFExclude[*rue]]:FOR[zzz_SMURFF]
{
	@mass *= #$@SMURFFCONFIG/podfactor$
	
	%MODULE[ModuleSMURFF]{ }
}

@PART[*]:HAS[@RESOURCE[Ablator],@MODULE[ModuleSMURFF],~SMURFFExclude[*rue]]:FOR[zzz_SMURFF] // For pods (or fuel tanks?) with built-in ablators.
{
	@RESOURCE[Ablator]
	{
		@amount *= #$@SMURFFCONFIG/podfactor$
		@maxAmount *= #$@SMURFFCONFIG/podfactor$
	}
	
	@MODULE[ModuleAblator]
	{
		@pyrolysisLossFactor /= #$@SMURFFCONFIG/podfactor$
	}
}

@PART[*]:HAS[@RESOURCE[Ablator],@MODULE[ModuleEngines*],~SMURFFExclude[*rue]]:FOR[zzz_SMURFF] // For engines with built-in ablators.
{
	@RESOURCE[Ablator]
	{
		@amount *= #$@SMURFFCONFIG/podfactor$
		@maxAmount *= #$@SMURFFCONFIG/podfactor$
	}
	
	@MODULE[ModuleAblator]
	{
		@pyrolysisLossFactor /= #$@SMURFFCONFIG/podfactor$
	}
	
	%MODULE[ModuleSMURFF]{ }
}

@PART[*]:HAS[@RESOURCE[Ablator],!MODULE[ModuleSMURFF],!MODULE[ModuleEngines*],~SMURFFExclude[*rue]]:FOR[zzz_SMURFF] // shields that aren't fuel tanks, pods, or engines
{
	@mass *= #$@SMURFFCONFIG/podfactor$
	
	@RESOURCE[Ablator]
	{
		@amount *= #$@SMURFFCONFIG/podfactor$
		@maxAmount *= #$@SMURFFCONFIG/podfactor$
	}
	
	@MODULE[ModuleAblator]
	{
		@pyrolysisLossFactor /= #$@SMURFFCONFIG/podfactor$
	}
	
	%MODULE[ModuleSMURFF]{ }
}

// **** ENGINES ****

@PART[*]:HAS[@MODULE[ModuleEngines*],!MODULE[ModuleEngines*]:HAS[!PROPELLANT[Oxidizer]],!MODULE[ModuleCommand],~CrewCapacity[>0],!MODULE[ModuleCargoBay],@MODULE[ModuleSMURFF],~SMURFFExclude[*rue]]:FOR[zzz_SMURFF] // Engines that already have ModuleSMURFF -- i.e. which have already been buffed, because they're liquid-fuel boosters -- need to have reserved tank mass removed before the mass buff hits.
{
	@mass -= #$reservedmass$
	@mass *= #$@SMURFFCONFIG/enginemassfactor$
	@mass += #$reservedmass$
	
	@MODULE[ModuleEngines*]:HAS[@PROPELLANT[Oxidizer]],*
	{
		@maxThrust *= #$@SMURFFCONFIG/enginethrustfactor$
	}
}

@PART[*]:HAS[@MODULE[ModuleEngines*],!MODULE[ModuleEngines*]:HAS[!PROPELLANT[Oxidizer]],!MODULE[ModuleCommand],!MODULE[ModuleCargoBay],!MODULE[ModuleSMURFF],~SMURFFExclude[*rue]]:FOR[zzz_SMURFF] //Mass buff now limited to engines which only have oxidizer-burning modes.  (Multimode engines that burn the same fuels in all modes, like SpaceY, are OK.)
{
	@mass *= #$@SMURFFCONFIG/enginemassfactor$
	
	@MODULE[ModuleEngines*]:HAS[@PROPELLANT[Oxidizer]],*
	{
		@maxThrust *= #$@SMURFFCONFIG/enginethrustfactor$
	}
	
	MODULE
	{
		name = ModuleSMURFF
	}
}

@PART[*]:HAS[@MODULE[ModuleEngines*]:HAS[@PROPELLANT[Oxidizer]],@CrewCapacity[>0],~SMURFFExclude[*rue]]:FOR[zzz_SMURFF] // And now the engines that weren't buffed because they are crew cabins.
{
	@MODULE[ModuleEngines*]:HAS[@PROPELLANT[Oxidizer]],*
	{
		@maxThrust *= #$@SMURFFCONFIG/enginethrustfactor$
	}
}

@PART[*]:HAS[@MODULE[ModuleEngines*]:HAS[@PROPELLANT[Oxidizer]],!MODULE[ModuleSMURFF],~SMURFFExclude[*rue]]:FOR[zzz_SMURFF] // And now the engines that weren't buffed because they are probe cores, cargo bays, or multimode engines with non-Oxidizer-burning modes.
{
	@MODULE[ModuleEngines*]:HAS[@PROPELLANT[Oxidizer]],*
	{
		@maxThrust *= #$@SMURFFCONFIG/enginethrustfactor$
	}
	
	MODULE
	{
		name = ModuleSMURFF
	}
}

// **** FUEL TANKS, PART 2 ****

@PART[*]:HAS[@MODULE[FSfuelSwitch],#totalCap[*],~SMURFFExclude[*rue]]:FOR[zzz_SMURFF] //Stock Fuel Switch
{
	%massBuff = #$totalCap$
	@massBuff *= 0.005
	@massBuff *= #$@SMURFFCONFIG/lfomassfactor$
	@mass -= #$massBuff$
	
	@MODULE[FSfuelSwitch]
	{
		@basePartMass = #$../mass$
	}
}

// **** SWITCHABLE TANKS ****

//I put these at the end because they give such a great mass reduction that I don't want it to apply it to any parts that have been buffed for any other reason -- they should apply to switchable tanks only.

@PART[*]:HAS[@MODULE[FStextureSwitch2]:HAS[#useFuelSwitchModule[*rue],#repaintableEVA[*rue]],@MODULE[FSfuelSwitch],!MODULE[ModuleEngines*],!MODULE[ModuleCommand],!MODULE[ModuleCargoBay],!MODULE[ModuleSMURFF],~SMURFFExclude[*rue]]:FOR[zzz_SMURFF]
{
	@mass /= #$@SMURFFCONFIG/switchablefactor$
	
	@MODULE[FSfuelSwitch]
	{
		@basePartMass /= #$@SMURFFCONFIG/switchablefactor$
		@tankMass[*,;] /= #$@SMURFFCONFIG/switchablefactor$
	}
	
	MODULE
	{
		name = ModuleSMURFF
	}
}

@PART[*]:HAS[@MODULE[FSfuelSwitch]:HAS[#availableInFlight[*rue]],!MODULE[ModuleEngines*],!MODULE[ModuleCommand],!MODULE[ModuleCargoBay],!MODULE[ModuleSMURFF],~SMURFFExclude[*rue]]:FOR[zzz_SMURFF]
{
	@mass /= #$@SMURFFCONFIG/switchablefactor$
	
	@MODULE[FSfuelSwitch]
	{
		@basePartMass /= #$@SMURFFCONFIG/switchablefactor$
		@tankMass[*,;] /= #$@SMURFFCONFIG/switchablefactor$
	}
	
	MODULE
	{
		name = ModuleSMURFF
	}
}

@PART[*]:HAS[@MODULE[FSfuelSwitch]:HAS[~availableInFlight[*rue]],!MODULE[ModuleEngines*],!MODULE[ModuleCommand],!MODULE[ModuleCargoBay],!MODULE[ModuleSMURFF],~SMURFFExclude[*rue]]:FOR[zzz_SMURFF]
{
	@mass /= #$@SMURFFCONFIG/lfofactor$
	
	@MODULE[FSfuelSwitch]
	{
		@basePartMass /= #$@SMURFFCONFIG/lfofactor$
		@tankMass[*,;] /= #$@SMURFFCONFIG/lfofactor$
	}
	
	MODULE
	{
		name = ModuleSMURFF
	}
}

@PART[*]:HAS[@MODULE[InterstellarFuelSwitch]:HAS[#resourceNames[LiquidFuel,Oxidizer;LiquidFuel;MonoPropellant;XenonGas;LqdHydrogen;LqdHydrogen,LqdOxygen;Stuctural]],!MODULE[ModuleSMURFF],~SMURFFExclude[*rue]]:FOR[zzz_SMURFF] //The "default" patch added by IFS in the absense of cryotanks or realfuels.
{
	@MODULE[InterstellarFuelSwitch]
	{
		@tankResourceMassDivider[0,;] *= #$@SMURFFCONFIG/switchablefactor$
		@tankResourceMassDivider[1,;] *= #$@SMURFFCONFIG/switchablefactor$
		@tankResourceMassDivider[2,;] *= #$@SMURFFCONFIG/switchablefactor$
		@tankResourceMassDivider[3,;] *= #$@SMURFFCONFIG/xenonfactor$
		
		@tankResourceMassDivider[4,;] = 2.2672 //Rebaselining to balance w/ NFP before applying the patch
		@tankResourceMassDivider[4,;] *= #$@SMURFFCONFIG/lh2zbofactor$
		
		@tankResourceMassDivider[5,;] = 7.7 //Close enough, I'll just grant it across the board (no point in modulating by tankLever)
	}
	
	MODULE
	{
		name = ModuleSMURFF
	}
}

@PART[*]:HAS[@MODULE[InterstellarTextureSwitch2]:HAS[#useFuelSwitchModule[*rue],#repaintableEVA[*rue]],@MODULE[InterstellarFuelSwitch],!MODULE[ModuleEngines*],!MODULE[ModuleCommand],!MODULE[ModuleCargoBay],!MODULE[ModuleSMURFF],~SMURFFExclude[*rue]]:FOR[zzz_SMURFF]
{
	@mass /= #$@SMURFFCONFIG/switchablefactor$
	
	@MODULE[InterstellarFuelSwitch]
	{
		@basePartMass /= #$@SMURFFCONFIG/switchablefactor$
		@tankMass[*,;] /= #$@SMURFFCONFIG/switchablefactor$
	}
	
	MODULE
	{
		name = ModuleSMURFF
	}
}

@PART[*]:HAS[@MODULE[InterstellarFuelSwitch]:HAS[#availableInFlight[*rue]],!MODULE[ModuleEngines*],!MODULE[ModuleCommand],!MODULE[ModuleCargoBay],!MODULE[ModuleSMURFF],~SMURFFExclude[*rue]]:FOR[zzz_SMURFF]
{
	@mass /= #$@SMURFFCONFIG/switchablefactor$
	
	@MODULE[InterstellarFuelSwitch]
	{
		@basePartMass /= #$@SMURFFCONFIG/switchablefactor$
		@tankMass[*,;] /= #$@SMURFFCONFIG/switchablefactor$
	}
	
	MODULE
	{
		name = ModuleSMURFF
	}
}

@PART[*]:HAS[@MODULE[InterstellarFuelSwitch]:HAS[~availableInFlight[*rue]],!MODULE[ModuleEngines*],!MODULE[ModuleCommand],!MODULE[ModuleCargoBay],!MODULE[ModuleSMURFF],~SMURFFExclude[*rue]]:FOR[zzz_SMURFF]
{
	@mass /= #$@SMURFFCONFIG/lfofactor$
	
	@MODULE[InterstellarFuelSwitch]
	{
		@basePartMass /= #$@SMURFFCONFIG/lfofactor$
		@tankMass[*,;] /= #$@SMURFFCONFIG/lfofactor$
	}
	
	MODULE
	{
		name = ModuleSMURFF
	}
}

@PART[*]:HAS[@MODULE[WBIResourceSwitcher]:HAS[#fieldReconfigurable[*rue]],!MODULE[ModuleEngines*],!MODULE[ModuleCommand],!MODULE[ModuleCargoBay],!MODULE[ModuleSMURFF],~SMURFFExclude[*rue]]:FOR[zzz_SMURFF]
{
	@mass /= #$@SMURFFCONFIG/switchablefactor$
	
	MODULE
	{
		name = ModuleSMURFF
	}
}

@PART[*]:HAS[@MODULE[WBIResourceSwitcher]:HAS[~fieldReconfigurable[*rue]],!MODULE[ModuleEngines*],!MODULE[ModuleCommand],!MODULE[ModuleCargoBay],!MODULE[ModuleSMURFF],~SMURFFExclude[*rue]]:FOR[zzz_SMURFF]
{
	@mass /= #$@SMURFFCONFIG/lfofactor$
	
	MODULE
	{
		name = ModuleSMURFF
	}
}

// **** B9PartSwitcher ****

//Since LH2O tank stats are derived from LH2 and Ox tanks, we need to do the math on them before we modify the "pure" tank types.

@B9_TANK_TYPE[LH2O]:FOR[zzz_SMURFF]
{
	lh2mass = #$@B9_TANK_TYPE[LH2]/tankMass$
	@lh2mass *= #$RESOURCE[LqdHydrogen]/unitsPerVolume$
	@lh2mass /= #$@B9_TANK_TYPE[LH2]/RESOURCE[LqdHydrogen]/unitsPerVolume$
	@lh2mass /= #$@SMURFFCONFIG/lh2liftfactor$
	
	oxmass = #$@B9_TANK_TYPE[OX]/tankMass$
	@oxmass *= #$RESOURCE[Oxidizer]/unitsPerVolume$
	@oxmass /= #$@B9_TANK_TYPE[OX]/RESOURCE[Oxidizer]/unitsPerVolume$
	@oxmass /= #$@SMURFFCONFIG/lfofactor$
	
	@tankMass = #$lh2mass$
	@tankMass += #$oxmass$
	
	-lh2mass = delete
	-oxmass = delete
}

@B9_TANK_TYPE[LH2OCryo]:FOR[zzz_SMURFF]
{
	lh2mass = #$@B9_TANK_TYPE[LH2Cryo]/tankMass$
	@lh2mass *= #$RESOURCE[LqdHydrogen]/unitsPerVolume$
	@lh2mass /= #$@B9_TANK_TYPE[LH2Cryo]/RESOURCE[LqdHydrogen]/unitsPerVolume$
	@lh2mass /= #$@SMURFFCONFIG/lh2zbofactor$
	
	oxmass = #$@B9_TANK_TYPE[OX]/tankMass$
	@oxmass *= #$RESOURCE[Oxidizer]/unitsPerVolume$
	@oxmass /= #$@B9_TANK_TYPE[OX]/RESOURCE[Oxidizer]/unitsPerVolume$
	@oxmass /= #$@SMURFFCONFIG/lfofactor$
	
	@tankMass = #$lh2mass$
	@tankMass += #$oxmass$
	
	-lh2mass = delete
	-oxmass = delete
}

@B9_TANK_TYPE[LiquidFuel,LFO,Oxidizer,LF,OX,LFOX]:FOR[zzz_SMURFF]
{
	@tankMass /= #$@SMURFFCONFIG/lfofactor$
}

@B9_TANK_TYPE[MonoPropellant]:FOR[zzz_SMURFF]
{
	@tankMass /= #$@SMURFFCONFIG/monofactor$
}

@B9_TANK_TYPE[LH2]:FOR[zzz_SMURFF]
{
	@tankMass /= #$@SMURFFCONFIG/lh2liftfactor$
}

@B9_TANK_TYPE[LH2Cryo]:FOR[zzz_SMURFF]
{
	@tankMass /= #$@SMURFFCONFIG/lh2zbofactor$
}

@B9_TANK_TYPE[Xenon]:FOR[zzz_SMURFF]
{
	@tankMass /= #$@SMURFFCONFIG/xenonfactor$
}

@B9_TANK_TYPE[MPEC]:FOR[zzz_SMURFF]
{
	@tankMass /= #$@SMURFFCONFIG/monofactor$
}

@B9_TANK_TYPE[Ore]:FOR[zzz_SMURFF]
{
	@tankMass /= #$@SMURFFCONFIG/orefactor$
}

// This will check to ensure that no parts with part-switching from CryoTanks will get sent into negative masses.
@PART[*]:HAS[@MODULE[ModuleB9PartSwitch]:HAS[@SUBTYPE[LH2]]]:FOR[zzz_SMURFF]
{	
	modMass = #$/MODULE[ModuleB9PartSwitch]/SUBTYPE[LH2]/addedMass$
	@modMass *= 0.75
	@modMass += #$mass$
	
	MODULE
	{
		name = ModuleSMURFFCryoCheck
	}
	
	%MODULE[ModuleSMURFF]{ }
}

// **** CLEANUP ****

@PART[*]:HAS[@MODULE[ModuleSMURFF],#mass[<0]]:FINAL // Just in case any parts end up with negative mass -- shouldn't happen for stockalike-balanced parts, but it probably won't end well if it's left alone.
{
	@mass = #$initialmass$
}

@PART[*]:HAS[@MODULE[ModuleSMURFFCryoCheck],#modMass[<0]]:FINAL //And for the Cryotank parts
{
	@MODULE[ModuleB9PartSwitch]
	{
		@SUBTYPE,*
		{
			@addedMass /= #$@SMURFFCONFIG/lfofactor$
		}
	}
}

@PART[*]:HAS[@MODULE[ModuleSMURFF]]:FINAL // Clean up our tracks.
{
	-reservedmass = delete	
	-initialmass = delete
	-massBuff = delete
	-modMass = delete
	
	-MODULE[ModuleSMURFF]{ }
	
	-MODULE[ModuleSMURFFCryoCheck]{ }
}

@PART[*]:FINAL
{
	-SMURFFExclude = delete
}