// Copyright 2015 Kerbas_ad_astra
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//Notes on conditions: Tanks with engines get the lower engine buff later, and command pods and cargo bays are not to be touched at all.  ModuleSMURFF flags parts which have gotten buffed, so parts with multiple fuels don't get double-buffed.  Buffs are organized from worst to best, so parts with multiple fuels only get the lowest buff.

@PART[*]:HAS[@MODULE[FSfuelSwitch],!MODULE[ModuleEngines*],!MODULE[ModuleCommand],!MODULE[ModuleCargoBay],!MODULE[ModuleSMURFF]]:FOR[SMURFF]
{
	@mass /= 2
	
	@MODULE[FSfuelSwitch]
	{
		@basePartMass /= 2
		// @tankMass /= 2  //It's not that simple.
	}
	
	MODULE
	{
		name = ModuleSMURFF
	}
}

@PART[*]:HAS[@MODULE[InterstellarFuelSwitch],!MODULE[ModuleEngines*],!MODULE[ModuleCommand],!MODULE[ModuleCargoBay],!MODULE[ModuleSMURFF]]:FOR[SMURFF]
{
	@mass /= 2
	
	@MODULE[InterstellarFuelSwitch]
	{
		@basePartMass /= 2
		// @tankMass /= 2  //It's not that simple.
	}
	
	MODULE
	{
		name = ModuleSMURFF
	}
}

@PART[*]:HAS[@RESOURCE[LiquidFuel]]:FOR[SMURFF] 
{
	resourcemass = #$RESOURCE[LiquidFuel]/maxAmount$
	@resourcemass *= #$@RESOURCE_DEFINITION[LiquidFuel]/density$ //In case the density changes -- it shouldn't, but why tempt fate?
	@resourcemass *= 0.09375 // stockalike tank mass is 1/8th fuel mass, we want to divide that by four, so subtract 3/4ths of that.
	@mass -= #$resourcemass$
	-resourcemass = delete
	
	%MODULE[ModuleSMURFF]{ }
}

@PART[*]:HAS[@RESOURCE[Oxidizer]]:FOR[SMURFF]
{
	resourcemass = #$RESOURCE[Oxidizer]/maxAmount$
	@resourcemass *= #$@RESOURCE_DEFINITION[Oxidizer]/density$ //In case the density changes -- it shouldn't, but why tempt fate?
	@resourcemass *= 0.09375 // stockalike tank mass is 1/8th fuel mass, we want to divide that by four, so subtract 3/4ths of that.
	@mass -= #$resourcemass$
	-resourcemass = delete
	
	%MODULE[ModuleSMURFF]{ }
}

@PART[*]:HAS[@RESOURCE[MonoPropellant]]:FOR[SMURFF]
{
	resourcemass = #$RESOURCE[MonoPropellant]/maxAmount$
	@resourcemass *= #$@RESOURCE_DEFINITION[MonoPropellant]/density$ //In case the density changes -- it shouldn't, but why tempt fate?
	@resourcemass *= 0.1 // stockalike tank mass is >2/15ths fuel mass, we want to divide that by four, so subtract 3/4ths of that.
	@mass -= #$resourcemass$
	-resourcemass = delete
	
	%MODULE[ModuleSMURFF]{ }
}

@PART[*]:HAS[@RESOURCE[XenonGas],!MODULE[ModuleEngines*],!MODULE[ModuleCommand],!MODULE[ModuleCargoBay]]:FOR[SMURFF]
{
	resourcemass = #$RESOURCE[XenonGas]/maxAmount$
	@resourcemass *= #$@RESOURCE_DEFINITION[XenonGas]/density$ //In case the density changes -- it shouldn't, but why tempt fate?
	@resourcemass *= 0.668 // stockalike tank mass is 78% fuel mass, we want to divide that by seven (to get to tank mass = 11% of fuel mass -> 90% fuel mass fraction), so subtract 6/7ths of that.
	@mass -= #$resourcemass$
	-resourcemass = delete
	
	%MODULE[ModuleSMURFF]{ }
}

@PART[*]:HAS[@RESOURCE[SolidFuel]]:FOR[SMURFF]
{
	resourcemass = #$RESOURCE[SolidFuel]/maxAmount$
	@resourcemass *= #$@RESOURCE_DEFINITION[SolidFuel]/density$ //In case the density changes -- it shouldn't, but why tempt fate?
	@resourcemass *= 0.092 // 40% of 23% of the SolidFuel mass -- Kickback tank mass is 23% fuel mass, we want to correct that to 13%, so subtract 40% of that.
	@mass -= #$resourcemass$
	-resourcemass = delete
	
	@MODULE[ModuleEngines*]:HAS[@PROPELLANT[SolidFuel]]
	{
		key0 = #$atmosphereCurve/key,0[1, ]$ //get the keys -- the second element of the first space-separated list called "key".
		key1 = #$atmosphereCurve/key,1[1, ]$
		@key0 += 40 //modify values -- add 40 seconds to bring Kickback close to Space Shuttle SRBs.
		@key1 += 40
		@atmosphereCurve //Unfortunately, this will wipe any tangents until I figure out a way to identify which keys have tangents and which don't. SRBs usually don't have any, but the "1" key of RLA Stockalike's SRBs do.
		{
			@key,0 = #$key,0[0, ]$ $../key0$ //$key,0[2, ]$ $key,0[3, ]$
			@key,1 = #$key,1[0, ]$ $../key1$ //$key,1[2, ]$ $key,1[3, ]$
		}
	}
	
	MODULE
	{
		name = ModuleSMURFF
	}
}

@PART[*]:HAS[@MODULE[ModuleEngines*],!RESOURCE[SolidFuel],@MODULE[ModuleSMURFF]]:FOR[SMURFF] // Engines that already have MODULE[SMURFF] -- i.e. which have already been buffed, because they're liquid-fuel boosters -- just get their thrust increased.
{
	@MODULE,*[ModuleEngines*]
	{
		@maxThrust *= 1.5
	}
}

@PART[*]:HAS[@MODULE[ModuleEngines*],!RESOURCE[SolidFuel],!MODULE[ModuleCommand],!MODULE[ModuleCargoBay],!MODULE[ModuleSMURFF]]:FOR[SMURFF]
{
	@mass *= .375
	
	@MODULE,*[ModuleEngines*]
	{
		@maxThrust *= 1.5
	}
	
	MODULE
	{
		name = ModuleSMURFF
	}
}

@PART[*]:HAS[@MODULE[ModuleEngines*],!RESOURCE[SolidFuel],!MODULE[ModuleSMURFF]]:FOR[SMURFF] // And now the engines that weren't buffed because they aren't LFBs but are command pods or cargo bays.  Can't be many, but just in case.
{
	@MODULE,*[ModuleEngines*]
	{
		@maxThrust *= 1.5
	}
	
	MODULE
	{
		name = ModuleSMURFF
	}
}

@PART[*]:HAS[@MODULE[TankContentSwitcher]]:FOR[SMURFF]
{
	@MODULE[TankContentSwitcher]
	{
		@TANK_TYPE_OPTION[Mixed,LiquidFuel,Oxidizer,RCS]
		{
			@dryDensity /= 4
		}
		@TANK_TYPE_OPTION[XenonGas]
		{
			@dryDensity /= 7
		}
		@TANK_TYPE_OPTION[SolidFuel]
		{
			@dryDensity *= 0.6
		}
	}
}

@PART[*]:HAS[@MODULE[ModuleSMURFF]]:FINAL // Clean up our tracks.
{
	@MODULE[ModuleEngines*]:HAS[@PROPELLANT[SolidFuel]]
	{
		-key0 = delete
		-key1 = delete
	}
	
	-MODULE[ModuleSMURFF]{ }
}